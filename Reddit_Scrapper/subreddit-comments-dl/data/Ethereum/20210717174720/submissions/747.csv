id,created_utc,title,selftext,full_link,score,comments
ns1bhn,1622800262,Exchange Bitcoin to LINK Token | Learn how to compare prices and convert BTC to LINK at the best rates,[removed],https://www.reddit.com/r/ethereum/comments/ns1bhn/exchange_bitcoin_to_link_token_learn_how_to/,1,0
ns1bkb,1622800270,"""Hey Craig Wright's legal team, do you hear me? Yes. I still think your client is a scammer""",,https://www.reddit.com/r/ethereum/comments/ns1bkb/hey_craig_wrights_legal_team_do_you_hear_me_yes_i/,1,252
ns1ifq,1622801014,"Future of Finance Fund (ETH, BTC + DEFI) in one Index Token",,https://www.reddit.com/r/ethereum/comments/ns1ifq/future_of_finance_fund_eth_btc_defi_in_one_index/,1,3
ns1x38,1622802570,"ARK‚Äôs Cathie Wood blames Elon Musk, ESG investors for recent crypto crash",,https://www.reddit.com/r/ethereum/comments/ns1x38/arks_cathie_wood_blames_elon_musk_esg_investors/,1,0
ns248m,1622803340,Price predictions,Just curious to see where everyone is at what price do you see Ethereum at over the next 5 years?,https://www.reddit.com/r/ethereum/comments/ns248m/price_predictions/,1,3
ns2873,1622803776,South india's üáÆüá≥ First Firm to accept all major cryptocurrency and meme coin such as $shib &amp; $doge https://www.airfoxtradingacademy.com/blog-airfoxacceptcrypto,,https://www.reddit.com/r/ethereum/comments/ns2873/south_indias_first_firm_to_accept_all_major/,1,5
ns2c23,1622804193,Should I invest in Ethereum or Ethereum Classic,,https://www.reddit.com/r/ethereum/comments/ns2c23/should_i_invest_in_ethereum_or_ethereum_classic/,1,7
ns2ig9,1622804831,"A trader states that Ethereum will reach US$10,000 this year - Crypto DeFinance",,https://www.reddit.com/r/ethereum/comments/ns2ig9/a_trader_states_that_ethereum_will_reach_us10000/,1,12
ns2jze,1622804984,üöÄ SAIYAARMY [ NEW LAUNCH üíéGem üíé ] - Ownership Renounced. Liquidity locked New coin/token (Solid Fundamentals),[removed],https://www.reddit.com/r/ethereum/comments/ns2jze/saiyaarmy_new_launch_gem_ownership_renounced/,1,0
ns2n55,1622805306,Norton antivirus adds Ethereum cryptocurrency mining,,https://www.reddit.com/r/ethereum/comments/ns2n55/norton_antivirus_adds_ethereum_cryptocurrency/,1,3
ns2t4u,1622805892,Non-Fungible Tokens in the Sports Industry. What Exactly Can Be Tokenized?,,https://www.reddit.com/r/ethereum/comments/ns2t4u/nonfungible_tokens_in_the_sports_industry_what/,1,4
ns2wzd,1622806286,Watch-only Ether Wallet,[removed],https://www.reddit.com/r/ethereum/comments/ns2wzd/watchonly_ether_wallet/,1,0
ns2y8z,1622806416,Hi everyone!,[removed],https://www.reddit.com/r/ethereum/comments/ns2y8z/hi_everyone/,1,0
ns35ec,1622807125,Sticky says my eth will automatically become eth2.0. I read elsewhere that you have to convert to the eth2.0 token at 1:1 ratio. Is that a scam? Do I really just have to do nothing with my eth and it becomes 2.0?,Sorry if this is redundant. I did read the sticky before anyone tells me to fo read it. Just want to make 1000% sure I don‚Äôt need to do anything with my eth for it to become the pos eth.,https://www.reddit.com/r/ethereum/comments/ns35ec/sticky_says_my_eth_will_automatically_become/,1,20
ns3a56,1622807590,Stereum Client Diversity üëÅÔ∏è Watch #CW 22 2021,,https://www.reddit.com/r/ethereum/comments/ns3a56/stereum_client_diversity_watch_cw_22_2021/,1,0
ns3nnm,1622808795,Show some love,,https://www.reddit.com/r/ethereum/comments/ns3nnm/show_some_love/,1,0
ns42ox,1622810041,Perk Labs and BitPay partner to accept cryptocurrency payment,,https://www.reddit.com/r/ethereum/comments/ns42ox/perk_labs_and_bitpay_partner_to_accept/,1,1
ns43wi,1622810155,"JPMorgan Chase: Positive take on the Crypto market, hiring Ethereum-experts, 34 positions",,https://www.reddit.com/r/ethereum/comments/ns43wi/jpmorgan_chase_positive_take_on_the_crypto_market/,1,6
ns45iy,1622810303,Must we cancel Musk?,[removed],https://www.reddit.com/r/ethereum/comments/ns45iy/must_we_cancel_musk/,1,0
ns4dc4,1622811006,"He is working hard for the upgrades, show him some love!!",,https://www.reddit.com/r/ethereum/comments/ns4dc4/he_is_working_hard_for_the_upgrades_show_him_some/,1,0
ns4rmf,1622812234,Borrowing vs Margin lending,"What‚Äôs the difference between leverage provided via borrowing on lending protocols (compound/Aave) vs leverage for margin trading (dy/dx) ?\nApart from leverage multiplier ( 2x,5x etc.) what‚Äôs the difference?",https://www.reddit.com/r/ethereum/comments/ns4rmf/borrowing_vs_margin_lending/,1,1
ns5068,1622812928,"bTc iS sUpErIoR, dOnT bUy sHiTcOiNs","I just went over the btc sub and man people are crying, freaking out, shitting their pants over there. That sub was so toxic and they always bash other alt coins thinking they belong to some superior cult. \n\nA single tweet from some billionaire makes the Superior and Exclusive BTC have a taste of dust, and btc hodlers are crying and i am kinda enjoying their tears.\n\nMy point is its a good thing ETH don't suffer from these issues and our future is very bright and this sub is also somewhat smart.",https://www.reddit.com/r/ethereum/comments/ns5068/btc_is_superior_dont_buy_shitcoins/,1,3
ns50p7,1622812971,NortonLifeLock Now Lets Users Mine Ethereum,,https://www.reddit.com/r/ethereum/comments/ns50p7/nortonlifelock_now_lets_users_mine_ethereum/,1,3
ns5l3n,1622814613,Ethereum (ETH) Flips Bitcoin (BTC) Yet Again: Here's How,,https://www.reddit.com/r/ethereum/comments/ns5l3n/ethereum_eth_flips_bitcoin_btc_yet_again_heres_how/,1,0
ns5ppp,1622814975,"Multi Coin Faucet, personally one of the best out there, easy to make and withdrawl money, and multiple coins to choose from. For me its the best one since FaucetHub",,https://www.reddit.com/r/ethereum/comments/ns5ppp/multi_coin_faucet_personally_one_of_the_best_out/,1,0
ns5zpa,1622815709,Elon Musk is becoming the most hated person in the crypto world,,https://www.reddit.com/r/ethereum/comments/ns5zpa/elon_musk_is_becoming_the_most_hated_person_in/,1,0
ns5zvw,1622815722,"Bmartcoin, the first experimental token native to the Bep20mart ecosystem... https://www.bep20mart.site",,https://www.reddit.com/r/ethereum/comments/ns5zvw/bmartcoin_the_first_experimental_token_native_to/,1,0
ns62t0,1622815935,Back to School - The Daily Gwei #262,,https://www.reddit.com/r/ethereum/comments/ns62t0/back_to_school_the_daily_gwei_262/,1,1
ns664z,1622816178,"Wall of un-edited thoughts about Ethereum, Cardano, Tezos and functional programming being a ""gimmick"" - from someone thinking about these this for years",[deleted],https://www.reddit.com/r/ethereum/comments/ns664z/wall_of_unedited_thoughts_about_ethereum_cardano/,1,0
ns66ya,1622816239,"Smithers, I'm beginning to think that Vitalik Buterin was not the brilliant tactician I thought he was...",,https://www.reddit.com/r/ethereum/comments/ns66ya/smithers_im_beginning_to_think_that_vitalik/,1,8
ns685v,1622816328,Erc20 Mixer Tumbler,[removed],https://www.reddit.com/r/ethereum/comments/ns685v/erc20_mixer_tumbler/,1,0
ns68tl,1622816379,New Multi Currency Mixer,<not selftext available>,https://www.reddit.com/r/ethereum/comments/ns68tl/new_multi_currency_mixer/,1,0
ns6l1w,1622817276,Vitalik: ‚ÄúCardano has these big academic proofs for everything where as Ethereum is more ok with heuristic arguments‚Äù. Any opinions on this?,"Personally I find this hard to square with 'ultra sound money', that's for sure. Trial and error is not always a good idea, is it?",https://www.reddit.com/r/ethereum/comments/ns6l1w/vitalik_cardano_has_these_big_academic_proofs_for/,1,29
ns77q2,1622818942,"Sign, Sign, Sign",[removed],https://www.reddit.com/r/ethereum/comments/ns77q2/sign_sign_sign/,1,0
ns7l44,1622819897,ERC20 and non-ERC20 Wallet Security," I'm looking for some **signal to cut the noise**, since most guides, blogs and articles are trying to push some arbitrary choice of wallet. So please, reply on the basis of your own experience and if possible on the basis of trusted information.\n\nTo store BTC most people know how to setup a secure cold wallet. For ETH and ERC20 my understanding is that MEW can be used to create a cold wallet too.\n\nPlease do not submit plain superficial answers suggesting a random wallet like Exodus or Trust. If you do use something like that, please state what are the specifics of creating a safe environment around it.\n\nPlease consider that I (and most people seriously talking about security and privacy) can run Tails, Qubes, Tor and other security measures if required.\n\nDue to country restrictions acquiring hardware with Secureboot/Heads is not an option right now. A hardware wallet is not an option right now, due to the same reason, unless there is a safe DIY solution.\n\nQuestions are:\n\n* For non ERC20 tokens, what safe wallet do you use/recommend?\n* Your suggestion allows for the creation of a cold wallet?\n* If hot only, why choosing it and what key security measures are you using?\n* For ERC20 tokens, do you use/recommend anything beyond MEW for cold storage?\n* If not, are you using hot wallets for ERC20 and ETH? Why choosing it and what key security measures are you using?\n\n&gt;Do your own research.\n\nThat's what I'm doing Einstein, this is just another good place to gather information.\n\nSorry if anything came out rude, I'm trying to be objective and the community deserves better than random blog posts and HODL memes.\n\nIf ever I'm satisfied with security architecture and wallet choice for people stuck in similar situation, I'll update the topic with all relevant information.\n\nCheers!",https://www.reddit.com/r/ethereum/comments/ns7l44/erc20_and_nonerc20_wallet_security/,1,1
ns7vjg,1622820651,"My unedited, uncensored thoughts about Ethereum, Cardano, Tezos, formal proofs and functional programming being a gimmick","**Warning: this post is an unedited stream of thoughts. **\n\nWhen browsing [another thread](https://www.reddit.com/r/ethereum/comments/nru5kh/cardano_founder_blocked_me_i_wonder_why/) on this subreddit, I've found a post about Cardano from /u/Theory-Early, who wrote:\n\n&gt; I dont think it sounds promising at all. 99.99% of all programmers do not give a single fuck about functional programming or formal verification. it's literally a gimmick to scam non-programmers with an ICO.\n\n&gt; programmers aren't attracted to cardano, only fucking retarded investors who think functional programming and formal verification is some magic bullet.\n\nFirst of all, Cardano is a mess that does **not** represent how a functional blockchain should be made. But I'll talk about this subject later. For now, I'd like to talk about the ""FP is a gimmick"" part. Rather than getting offended and discard /u/Theory-Early as someone who just ""doesn't get it"" (like most FP elitists would probably do), this inspires me to really understand where this perception comes from, evaluate its merits and wonder what could be done to change it. This isn't just an isolated case. When I was developing Formality, I've felt that impression coming from many of you, and I know many of you feel that way. Rightfully so, ok? It is my job to understand this feeling, its roots, and figure out how to change it.\n\nIt is true that functional programming and formal verification has certain fame of being over-hyped tools that, in the end, provide little to no practical benefit. At the same time, those who do get it ultimately fall in love and almost universally come to the conclusion that it is objectively, profoundly superior to the alternatives. Isn't that weird? Why there is such a huge disconnect between people who ""get it"" think it is the best thing ever, and everyone else, who just watches from the outside and judges it as a useless gimmick?\n\nI think both sides have a fair judgement. The thing is, when you, in a personal level, learn about FP, you instantly realize how good it is. It is obvious for you, because all the tools it directly provides you objectively make you a better programmer, today. You get access to abstractions like functors, monads, folds, composition, a next-gen type-system. Learning to use these things properly makes you so much better that you wonder how you could ever lived so long without those things. And then you start preaching about how amazing FP is. And write about burritos. **And ultimately proceed to build nothing of real value.**\n\nAh, that happens sooo often. But why? If FP is so objectively better, where are all the cool things built with it? I have a simple answer to that paradox, but it might make some people really upset with me: **Haskell isn't a practical language.** And that's all.\n\nSee, there are some practical FP languages like Scala and Clojure, but these are practical exactly because of all the non-FP concepts mixed in. They are hybrid, multi-paradigm languages. So that doesn't count as a solid argument in favor of FP. When it comes to fully embracing FP, there is only one mature language in the market: Haskell. And that language isn't practical. Simple as that. I hope that doesn't make /r/haskell upset with me, but, as much as I love it, it isn't.\n\n1. Haskell has possibly the worst package manager in the world. It is not just bad, it is terrible. As in, ""can't install more than 3 libs without breaking the world"" terrible. It is so bad the community had to create a second package manager that maintains a curated list of packages that work in conjunction. Which kinda works, but 1. requires a ton of work, 2. doesn't scale and 3. still breaks if you need to install anything outside of that curated list.\n\n2. Its error messages are sometimes great, sometimes completely cryptic. Problem is: it takes just one cryptic messages to waste hours of your time. Even worse, in the end, often it isn't even your fault. Which takes us to...\n\n3. A messy soup of package extensions that is required to make up for the lack of dependent types. Sooner or later, something you need to do will not work just because Haskell can't understand it. And then you'll need to add extensions like RankNTypes, GADTs, FlexibleInstances, ScopedTypeVariables, and eventually you're coding in a frankenstein dialect with error messages that not even the author understands.\n\n4. Too many obscure, academic words that exist for historical reasons (or no good reason). This only further isolates the community in a bubble. If a word requires explaining, it isn't a good word. A programmer shouldn't learn a whole new vocabulary to just get started. Things like: why isn't Functor called Mappeable?\n\n5. The idiomatic syntax isn't very practical. For example, a `fold` is beautiful when the body is short, but when it is large, it requires you to indent your code in bizarre ways. See [this](https://www.reddit.com/r/haskell/comments/nd9j7c/what_are_you_hyped_about_today/gya62ji/) comment for an example. The acclaimed point-free style often leads to unreadable one-liners that do 1000 things. The equational notation for function declaration becomes redundant once you have many arguments, and it doesn't scale vertically. Monads are a genius, profound way to handle effects... once you spend a semester learning about them and getting overwhelmed by the awful or plain wrong tutorials. Pattern-matching records with many fields requires you to rename all fields, every single time. Extracting big or deep fields is extremely verbose, almost forcing you to deal with lenses. Which then require another semester of courses, 10's of cryptic symbols, and once you do it, have fun with your 10x performance penalty. And then you miss the times when you could just write `foo.bar.x.y += 3`.\n\n6. Finally, and perhaps mostly, its failure to compete on the front-end, user-facing space. There is still no viable JS compiler, no satisfactory way to make iOS/Android apps, or Windows/OSX/Linux releases. \n\nIn short, what I'm saying is that Haskell is a very unpractical language out of the box, and that it is a major contributor to this perception that FP is a gimmick. And don't get me wrong, I'm not hating on Haskell, it is still one of my favorite languages, and it **can** be extremely powerful for an individual or isolate team with enough time. But I truly don't think it is going to, say, replace TypeScript anytime soon. It just doesn't scale, community-wise. And what is the point of being a god-like programmer, in a language that few use? Only to get beat by a CS freshman who just installed a `npm` package that does what he wanted?\n\nBut FP, as a concept... that's a different matter. It has a lot of potential, and I don't think anybody will be able to judge it until they truly get it. So, this sparks the question: what would happen if we had an catual hardcore functional language, with all the power of Haskell, but none of its practical problems? I.e., one that would be as easy to learn as TypeScript? One that would strip away all the academic jargon, one with amazing error messages, one with an easy, obvious ways to anything you do in conventional languages (effects, field updates, loops)? One that, like TypeScript, was ready to scale into a massive ecosystem of real-world applications? Yet, one that, under the hoods, was grounded on the solid foundations of type theory, with dependent types, formal proofs and all that powerful stuff waiting for you, when - and if - you're ready for it? If we had such a language, what would happen? Would the common developer still dismiss FP as a weird thing of weird people, or would they suddenly realize the immense power that FP has, and fall in love? I honestly, deeply, strongly, think the later would happen.\n\nAm I right? Am I wrong? Well, for one, we could almost see that happening a few years ago, powered by another language: Elm. It did just some of the things I sad, and the result was clear, as it quickly grew to be one of the most used functional languages. But it had a big issue: it simplified things so much, it ended up shallow. Once you learned enough and started needing the additional power, it wasn't there. The language was too limited to do certain things. So the hype eventually died off. But do you really need to overly simplify the core language in order to make it simple? No! I don't think so. You can just be careful to get these things out of the way of the common developer, and that can be accomplished by serving the common developer a familiar syntax that is just enough for him to thrive. The advanced stuff can still be accessible for those who want it.\n\nThis line of thought is what ultimately lead me to build Formality, now named [Kind](https://github.com/uwu-tech/kind). Kind is **the** language being developed with the main purpose of becoming the ultimate functional language that can scale to the wide market, maintaining all the power of Haskell, fixing its mistakes, bringing powerful concepts from proof languages and keeping itself approachable, efficient. Are we there yet? Honestly, I think we are. At least, very close. A solid foundation? Check. Performance? Check. Can it be used by normal developers to build real stuff? Well, in the last few months, I've made an experiment. I've hired about 5 individuals with little or no programming experience, taught them Kind, and asked them to build a game and left. 3 months after, they're almost done building an engine with rollback netcode, a graphics framework, a reactive user interface, state computations based on stream of events. They're dealing with monads, folds, dependent types. And they just keep building and giving, not ever getting stuck or feeling hopeless. I truly think no other proof language has accomplished anything like that.\n\nSo, why this big wall of text, here on /r/ethereum? I actually don't know. I guess I had too much to say, and I wanted to vent. I do feel a little anxious when I see idiots getting so much voice and attention, but nothing gets me more than projects that have no substance or fundamentals getting treated as if they were somehow profound. Doge deserves its spot, it has a foundation, for being a meme, for being cute, for challenging the seriousness of money. But Cardano? What is its foundation? It sells itself as a more functional, research-based alternative to Ethereum. So, please, can anyone tell me one thing Cardano does, that Kind+Ethereum doesn't do much better? It makes me upset to see people dismissing FP as a whole, because of a project with no real substance, that promises to change the world, yet can't deliver smart-contracts after half a decade of existence. I think Cardano is a big disservice for the FP community.\n\nWhen it comes to formally verified smart-contracts, Kind+Ethereum is all we ever need. And, no, I'm not saying formal proofs are a silver bullet for security, but I do think it will massively improve the issue, and I promise eventually you'll get it. But how? For some time, I thought it'd be a matter of compiling Kind to the EVM. That would allow you to write normal Kind programs and run them inside Ethereum. I don't think that is a great idea anymore. The gas overhead of compiling lambdas, [as little as we make them](https://medium.com/@maiavictor/compiling-formality-to-the-evm-99aec75677dd), is still superior to 0. In a network where every opcode costs a fortune, people would just write in a cheaper, less safe language. And, in reality, smart-contracts are often simple and don't require all the features you have in Kind. \n\nSo, for now, the plan is to just create a SmartContract DSL on Kind, with a reasonable syntax sugar, that will allow people to write Ethereum smart-contracts embedded on it. They'll then be able to easily deploy, monitor and prove things about these contracts. Simple, easy and effective. Sure, this **is** something that can be done on Agda, Idris, Coq too. And perhaps that is why I've avoided this solution for a while. But, honestly? That is the way to go. And these are not practical languages either, I don't think they'll ever have massive ecosystems, so doing it in Kind will enable formally verified smart-contracts for the masses, which is something new. Now, please, tell me: once Kind is popular, has a great ecosystem, and people can easily write, deploy and verify Ethereum smart-contracts on it... **then what is even the point of Cardano anymore?** In what technical sense it even needs to exist? It doesn't scale better than Ethereum, I honestly can't find a reason. If anyone has a great answer to that question, let me know, because I've been waiting for years and there is none.\n\nTo be clear, I don't want to sound like a hater. I'm not lying when I say I love when I'm proven wrong, because I can cut losses and stop wasting my time in a wrong idea (just be Kind, please). But for now, I can't look at Cardano and not think: what is the point? Or, rather: why people are so hyped about something that is, in my head, objectively inferior to what I'm building? Am I that out of touch? I'm just trying to understand. What Cardano does? The best arguments I've found so far are that:\n\n1. ""Haskell is safer than Solidity."" Fair. But Kind is much safer than Haskell. By a large margin. Is there anyone who disagrees with that? So, are you telling me that Cardano built an entire network, with the whole premise of being ""a safer, more functional"" alternative to Ethereum, only to be obsolete as soon as an actual proof language adds support to Ethereum smart-contracts? Or are they betting that a proof language like Kind will never be popular enough to be viable? Or that people will never realize Haskell doesn't even have formal proofs? \n\n2. ""Our virtual-machine language is easier to reason about."" Fair. But a DSL in Kind, that compiles to the EVM, can also be made very easy to reason about. There is no need to create a whole network around that. Now, to be clear, I still think compiling Kind to its own INet-based ""functional virtual machine"" is a fucking amazing idea. **That** would justify building its own, separate blockchain, because the **cost model** is so beautifully great. But that's a lot of work, and NOT what Cardano is proposing. \n\nTo be fair, I could be really misunderstanding something, since Cardano smart-contracts aren't even written in Haskell, and it is still not clear to me what is the actual language used for it. Is it Plutus? Is it Marlowe? What is the execution environment that every full node runs? Is it a stack-machine? Are there lambdas? What are the opcodes? Where is the cost table? Is there even one? How much a beta-reduction costs? How do they measure that? Perhaps I'm too dumb to get it, but, I mean, if I can't get it, how do they expect everyone will? It has been years and I still don't get Cardano. And I swear I'm not lazy, I've tried. For a comparison, it took me a 5 minutes to open Ethereum's yellow paper and immediately get its point.\n\nAnyway, these are my un-edited thoughts about all these things, for whoever this may interest. About Kind, soon we'll be back with a bunch of cool things to show. I just hope people give us some space to show these things! If Cardano deserves a $54b network, we deserve some attention. It is so sad to see crap getting so much attention, while people building real stuff get ignored. But, fair enough, the market decides what it wants. For now, we'll keep building.\n\nSee you, eventually.",https://www.reddit.com/r/ethereum/comments/ns7vjg/my_unedited_uncensored_thoughts_about_ethereum/,1,0
ns7yng,1622820870,"My unedited, uncensored thoughts about Ethereum, Cardano, Tezos, formal proofs and functional programming being a gimmick","**Warning: this post is a huge wall of unedited thoughts. **\n\nWhen browsing [another thread](https://www.reddit.com/r/ethereum/comments/nru5kh/cardano_founder_blocked_me_i_wonder_why/) on this subreddit, I've noticed a comment about Cardano from /u/Theory-Early, who wrote:\n\n&gt; I dont think it sounds promising at all. 99.99% of all programmers do not give a single fuck about functional programming or formal verification. it's literally a gimmick to scam non-programmers with an ICO.\n\n&gt; programmers aren't attracted to cardano, only fucking retarded investors who think functional programming and formal verification is some magic bullet.\n\nFirst of all, Cardano is a mess that does **not** represent how a functional blockchain should be made. But I'll talk about this subject later. For now, I'd like to talk about the ""FP is a gimmick"" part. Rather than getting offended and discard /u/Theory-Early as someone who just ""doesn't get it"" (like most FP elitists would probably do), this inspires me to really understand where this perception comes from, evaluate its merits and wonder what could be done to change it. This isn't just an isolated case. When I was developing Formality, I've felt that impression coming from many of you, and I know many of you feel that way. Rightfully so, ok? It is my job to understand this feeling, its roots, and figure out how to change it.\n\nIt is true that functional programming and formal verification has certain fame of being over-hyped tools that, in the end, provide little to no practical benefit. At the same time, those who do get it ultimately fall in love and almost universally come to the conclusion that it is objectively, profoundly superior to the alternatives. Isn't that weird? Why there is such a huge disconnect between people who ""get it"" think it is the best thing ever, and everyone else, who just watches from the outside and judges it as a useless gimmick?\n\nI think both sides have a fair judgement. The thing is, when you, in a personal level, learn about FP, you instantly realize how good it is. It is obvious for you, because all the tools it directly provides you objectively make you a better programmer, today. You get access to abstractions like functors, monads, folds, composition, a next-gen type-system. Learning to use these things properly makes you so much better that you wonder how you could ever lived so long without those things. And then you start preaching about how amazing FP is. And write about burritos. **And ultimately proceed to build nothing of real value.**\n\nAh, that happens sooo often. But why? If FP is so objectively better, where are all the cool things built with it? I have a simple answer to that paradox, but it might make some people really upset with me: **Haskell isn't a practical language.** And that's all.\n\nSee, there are some practical FP languages like Scala and Clojure, but these are practical exactly because of all the non-FP concepts mixed in. They are hybrid, multi-paradigm languages. So that doesn't count as a solid argument in favor of FP. When it comes to fully embracing FP, there is only one mature language in the market: Haskell. And that language isn't practical. Simple as that. I hope that doesn't make /r/haskell upset with me, but, as much as I love it, it isn't.\n\n1. Haskell has possibly the worst package manager in the world. It is not just bad, it is terrible. As in, ""can't install more than 3 libs without breaking the world"" terrible. It is so bad the community had to create a second package manager that maintains a curated list of packages that work in conjunction. Which kinda works, but 1. requires a ton of work, 2. doesn't scale and 3. still breaks if you need to install anything outside of that curated list.\n\n2. Its error messages are sometimes great, sometimes completely cryptic. Problem is: it takes just one cryptic messages to waste hours of your time. Even worse, in the end, often it isn't even your fault. Which takes us to...\n\n3. A messy soup of package extensions that is required to make up for the lack of dependent types. Sooner or later, something you need to do will not work just because Haskell can't understand it. And then you'll need to add extensions like RankNTypes, GADTs, FlexibleInstances, ScopedTypeVariables, and eventually you're coding in a frankenstein dialect with error messages that not even the author understands.\n\n4. Too many obscure, academic words that exist for historical reasons (or no good reason). This only further isolates the community in a bubble. If a word requires explaining, it isn't a good word. A programmer shouldn't learn a whole new vocabulary to just get started. Things like: why isn't Functor called Mappeable?\n\n5. The idiomatic syntax isn't very practical. For example, a `fold` is beautiful when the body is short, but when it is large, it requires you to indent your code in bizarre ways. See [this](https://www.reddit.com/r/haskell/comments/nd9j7c/what_are_you_hyped_about_today/gya62ji/) comment for an example. The acclaimed point-free style often leads to unreadable one-liners that do 1000 things. The equational notation for function declaration becomes redundant once you have many arguments, and it doesn't scale vertically. Monads are a genius, profound way to handle effects... once you spend a semester learning about them and getting overwhelmed by the awful or plain wrong tutorials. Pattern-matching records with many fields requires you to rename all fields, every single time. Extracting big or deep fields is extremely verbose, almost forcing you to deal with lenses. Which then require another semester of courses, 10's of cryptic symbols, and once you do it, have fun with your 10x performance penalty. And then you miss the times when you could just write `foo.bar.x.y += 3`.\n\n6. Finally, and perhaps mostly, its failure to compete on the front-end, user-facing space. There is still no viable JS compiler, no satisfactory way to make iOS/Android apps, or Windows/OSX/Linux releases. \n\nIn short, what I'm saying is that Haskell is a very unpractical language out of the box, and that it is a major contributor to this perception that FP is a gimmick. And don't get me wrong, I'm not hating on Haskell, it is still one of my favorite languages, and it **can** be extremely powerful for an individual or isolate team with enough time. But I truly don't think it is going to, say, replace TypeScript anytime soon. It just doesn't scale, community-wise. And what is the point of being a god-like programmer, in a language that few use? Only to get beat by a CS freshman who just installed a `npm` package that does what he wanted?\n\nBut FP, as a concept... that's a different matter. It has a lot of potential, and I don't think anybody will be able to judge it until they truly get it. So, this sparks the question: what would happen if we had an catual hardcore functional language, with all the power of Haskell, but none of its practical problems? I.e., one that would be as easy to learn as TypeScript? One that would strip away all the academic jargon, one with amazing error messages, one with an easy, obvious ways to anything you do in conventional languages (effects, field updates, loops)? One that, like TypeScript, was ready to scale into a massive ecosystem of real-world applications? Yet, one that, under the hoods, was grounded on the solid foundations of type theory, with dependent types, formal proofs and all that powerful stuff waiting for you, when - and if - you're ready for it? If we had such a language, what would happen? Would the common developer still dismiss FP as a weird thing of weird people, or would they suddenly realize the immense power that FP has, and fall in love? I honestly, deeply, strongly, think the later would happen.\n\nAm I right? Am I wrong? Well, for one, we could almost see that happening a few years ago, powered by another language: Elm. It did just some of the things I sad, and the result was clear, as it quickly grew to be one of the most used functional languages. But it had a big issue: it simplified things so much, it ended up shallow. Once you learned enough and started needing the additional power, it wasn't there. The language was too limited to do certain things. So the hype eventually died off. But do you really need to overly simplify the core language in order to make it simple? No! I don't think so. You can just be careful to get these things out of the way of the common developer, and that can be accomplished by serving the common developer a familiar syntax that is just enough for him to thrive. The advanced stuff can still be accessible for those who want it.\n\nThis line of thought is what ultimately lead me to build Formality, now named [Kind](https://github.com/uwu-tech/kind). Kind is **the** language being developed with the main purpose of becoming the ultimate functional language that can scale to the wide market, maintaining all the power of Haskell, fixing its mistakes, bringing powerful concepts from proof languages and keeping itself approachable, efficient. Are we there yet? Honestly, I think we are. At least, very close. A solid foundation? Check. Performance? Check. Can it be used by normal developers to build real stuff? Well, in the last few months, I've made an experiment. I've hired about 5 individuals with little or no programming experience, taught them Kind, and asked them to build a game and left. 3 months after, they're almost done building an engine with rollback netcode, a graphics framework, a reactive user interface, state computations based on stream of events. They're dealing with monads, folds, dependent types. And they just keep building and giving, not ever getting stuck or feeling hopeless. I truly think no other proof language has accomplished anything like that.\n\nSo, why this big wall of text, here on /r/ethereum? I actually don't know. I guess I had too much to say, and I wanted to vent. I do feel a little anxious when I see idiots getting so much voice and attention, but nothing gets me more than projects that have no substance or fundamentals getting treated as if they were somehow profound. Doge deserves its spot, it has a foundation, for being a meme, for being cute, for challenging the seriousness of money. But Cardano? What is its foundation? It sells itself as a more functional, research-based alternative to Ethereum. So, please, can anyone tell me one thing Cardano does, that Kind+Ethereum doesn't do much better? It makes me upset to see people dismissing FP as a whole, because of a project with no real substance, that promises to change the world, yet can't deliver smart-contracts after half a decade of existence. I think Cardano is a big disservice for the FP community.\n\nWhen it comes to formally verified smart-contracts, Kind+Ethereum is all we ever need. And, no, I'm not saying formal proofs are a silver bullet for security, but I do think it will massively improve the issue, and I promise eventually you'll get it. But how? For some time, I thought it'd be a matter of compiling Kind to the EVM. That would allow you to write normal Kind programs and run them inside Ethereum. I don't think that is a great idea anymore. The gas overhead of compiling lambdas, [as little as we make them](https://medium.com/@maiavictor/compiling-formality-to-the-evm-99aec75677dd), is still superior to 0. In a network where every opcode costs a fortune, people would just write in a cheaper, less safe language. And, in reality, smart-contracts are often simple and don't require all the features you have in Kind. \n\nSo, for now, the plan is to just create a SmartContract DSL on Kind, with a reasonable syntax sugar, that will allow people to write Ethereum smart-contracts embedded on it. They'll then be able to easily deploy, monitor and prove things about these contracts. Simple, easy and effective. Sure, this **is** something that can be done on Agda, Idris, Coq too. And perhaps that is why I've avoided this solution for a while. But, honestly? That is the way to go. And these are not practical languages either, I don't think they'll ever have massive ecosystems, so doing it in Kind will enable formally verified smart-contracts for the masses, which is something new. Now, please, tell me: once Kind is popular, has a great ecosystem, and people can easily write, deploy and verify Ethereum smart-contracts on it... **then what is even the point of Cardano anymore?** In what technical sense it even needs to exist? It doesn't scale better than Ethereum, the built-in forking stuff is an actual gimmick, and it isn't safer or more functional in any way. So I honestly can't find a reason. If anyone has a great answer to that question, let me know, because I've been waiting for years and there is none.\n\nTo be clear, I don't want to sound like a hater. I'm not lying when I say I love when I'm proven wrong, because I can cut losses and stop wasting my time in a wrong idea (just be Kind, please). But for now, I can't look at Cardano and not think: what is the point? Or, rather: why people are so hyped about something that is, in my head, objectively inferior to what I'm building? Am I that out of touch? I'm just trying to understand. What Cardano does? The best arguments I've found so far are that:\n\n1. ""Haskell is safer than Solidity."" Fair. But Kind is much safer than Haskell. By a large margin. Is there anyone who disagrees with that? So, are you telling me that Cardano built an entire network, with the whole premise of being ""a safer, more functional"" alternative to Ethereum, only to be obsolete as soon as an actual proof language adds support to Ethereum smart-contracts? Or are they betting that a proof language like Kind will never be popular enough to be viable? Or that people will never realize Haskell doesn't even have formal proofs? \n\n2. ""Our virtual-machine language is easier to reason about."" Fair. But a DSL in Kind, that compiles to the EVM, can also be made very easy to reason about. There is no need to create a whole network around that. Now, to be clear, I still think compiling Kind to its own INet-based ""functional virtual machine"" is a fucking amazing idea. **That** would justify building its own, separate blockchain, because the **cost model** is so beautifully great. But that's a lot of work, and NOT what Cardano is proposing. \n\nTo be fair, I could be really misunderstanding something, since Cardano smart-contracts aren't even written in Haskell, and it is still not clear to me what is the actual language used for it. Is it Plutus? Is it Marlowe? What is the execution environment that every full node runs? Is it a stack-machine? Are there lambdas? What are the opcodes? Where is the cost table? Is there even one? How much a beta-reduction costs? How do they measure that? Perhaps I'm too dumb to get it, but, I mean, if I can't get it, how do they expect everyone will? It has been years and I still don't get Cardano. And I swear I'm not lazy, I've tried. For a comparison, it took me a 5 minutes to open Ethereum's yellow paper and immediately get its point.\n\nAnyway, these are my un-edited thoughts about all these things, for whoever this may interest. About Kind, soon we'll be back with a bunch of cool things to show. I just hope people give us some space to show these things! If Cardano deserves a $54b network, we deserve some attention. It is so sad to see crap getting so much attention, while people building real stuff gets ignored. But, fair enough, the market decides what it wants. For now, we'll keep building.\n\nSee you, eventually.",https://www.reddit.com/r/ethereum/comments/ns7yng/my_unedited_uncensored_thoughts_about_ethereum/,1,92
ns801c,1622820972,Norton to turn anti-virus into ETH miner for its users,,https://www.reddit.com/r/ethereum/comments/ns801c/norton_to_turn_antivirus_into_eth_miner_for_its/,1,0
ns81ay,1622821064,this app makes you money on unneeded data or wifi,[removed],https://www.reddit.com/r/ethereum/comments/ns81ay/this_app_makes_you_money_on_unneeded_data_or_wifi/,1,0
ns84ed,1622821289,Did facebook pages earn money ? Ways to earn money from facebook in 2022 Also. Read this Article now and start making your first $1000 per month,,https://www.reddit.com/r/ethereum/comments/ns84ed/did_facebook_pages_earn_money_ways_to_earn_money/,1,0
ns84s8,1622821318,How to create/delete a pinterest mood board in Iphone/Android with Images 2021 - 2022. Read this Article and start growing your business on Pinterest 2021,,https://www.reddit.com/r/ethereum/comments/ns84s8/how_to_createdelete_a_pinterest_mood_board_in/,1,0
ns8dko,1622821978,Building NFTs from scratch: A technical tutorial,,https://www.reddit.com/r/ethereum/comments/ns8dko/building_nfts_from_scratch_a_technical_tutorial/,1,1
ns8hwr,1622822315,"We‚Äôve witnessed more than 300M$ of funds being lost from hacks, and rug pulls ever since the DeFi Sector exploded in popularity last year. In This Article, we explored common vulnerabilities, exploits, reasons behind these DeFi hacks, and ways to secure protocols.",,https://www.reddit.com/r/ethereum/comments/ns8hwr/weve_witnessed_more_than_300m_of_funds_being_lost/,1,4
ns8m08,1622822594,G√ºvenli midir,,https://www.reddit.com/r/ethereum/comments/ns8m08/g√ºvenli_midir/,1,0
ns8oiy,1622822781,The Ethereum Foundation is not Ethereum -- Philosophy of Subtraction,,https://www.reddit.com/r/ethereum/comments/ns8oiy/the_ethereum_foundation_is_not_ethereum/,1,0
ns8z6c,1622823572,"Best Investment Ever? Vitalik Buterin Says He Cashed Out $4.3M for $25,000 He Invested in Dogecoin in 2016",,https://www.reddit.com/r/ethereum/comments/ns8z6c/best_investment_ever_vitalik_buterin_says_he/,1,1
ns9kbc,1622825124,Blockchain process - how does it work?!,[removed],https://www.reddit.com/r/ethereum/comments/ns9kbc/blockchain_process_how_does_it_work/,1,0
nsa2rp,1622826340,Watch this video on What Elon Musk Just Did To Bitcoin Dogecoin and Ethereum!,,https://www.reddit.com/r/ethereum/comments/nsa2rp/watch_this_video_on_what_elon_musk_just_did_to/,1,0
nsa649,1622826589,Moonlight,[removed],https://www.reddit.com/r/ethereum/comments/nsa649/moonlight/,1,0
nsad28,1622827102,Does anyone know how the maybe delay from Eth 2.0 will affect the Eip-1559 launch ?,<not selftext available>,https://www.reddit.com/r/ethereum/comments/nsad28/does_anyone_know_how_the_maybe_delay_from_eth_20/,1,0
